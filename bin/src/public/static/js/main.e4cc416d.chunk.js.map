{"version":3,"sources":["app/components/transaction/index.js","app/components/list/index.js","app/components/pager/index.js","app/utils/paging-helper.js","constants.js","app/pages/balance/index.js","app/utils/transactions-client.js","app/app.js","index.js"],"names":["Transaction","props","useState","open","setOpen","trans","transaction","Card","className","type","key","id","Body","as","Button","variant","onClick","aria-controls","aria-expanded","amount","Collapse","in","effectiveDate","List","Container","Row","Col","title","transactions","map","Pager","startPage","endPage","pagingItems","push","Pagination","Prev","onPageChangeHandler","page","Ellipsis","Item","active","disabled","this","totalPages","Next","pagesBefore","Math","round","maxPages","max","extraPages","calculateStartAndEndPage","childrenItems","getPaginationItems","React","Component","Balance","state","pagedTransactions","onRefresh","bind","setData","Promise","resolve","fetch","process","BASE_URL","then","transactionsData","json","balanceData","ceil","length","balance","toFixed","data","setState","getPagedData","slice","Header","Footer","App","document","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4cc416d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Card, Collapse, Button } from 'react-bootstrap';\r\n\r\nconst Transaction =  (props) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const trans = props.transaction;\r\n\r\n    return (\r\n        <Card className={trans.type} key={trans.id}>\r\n            <Card.Body className=\"remove-decoration\" as={Button} variant=\"link\" onClick={() => setOpen(!open)} aria-controls=\"example-collapse-text\"\r\n                aria-expanded={open} >\r\n                <label>Type: {trans.type} </label><br />\r\n                <label>Amount: ${trans.amount} </label>\r\n                <Collapse className=\"class\" in={open}>\r\n                    <div>\r\n                        <label>Id: {trans.id} </label><br />\r\n                        <label>Effective date: {trans.effectiveDate} </label>\r\n                    </div>\r\n                </Collapse>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport Transaction from '../transaction';\r\n\r\n\r\nconst List = (props) => {\r\n    return (\r\n        <Container className=\"pb-5\" >\r\n            <Row>\r\n                <Col className=\"float-left p-0 font-italic\">\r\n                    <h1>{props.title}</h1>\r\n                    <br />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n               \r\n            </Row>\r\n            <Row>\r\n                <Col >\r\n                    {props.transactions.map((transaction) =>\r\n                        (\r\n                            <Transaction key={transaction.id} transaction={transaction} ></Transaction>\r\n                        )\r\n                    )\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default List;","\r\n\r\nimport React from 'react';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport {calculateStartAndEndPage} from '../../utils/paging-helper';\r\n\r\nclass Pager extends React.Component {\r\n\r\n    /**@description Method that\r\n     *  Method that renders page controls\r\n     */\r\n    getPaginationItems(startPage, endPage) {\r\n        const pagingItems = [];\r\n        //if the first pages do not show an elipisis and control to go back a page are shown\r\n        if (startPage !== 1) {\r\n            pagingItems.push(\r\n                ...[<Pagination.Prev key=\"prev\" onClick={() =>\r\n                    this.props.onPageChangeHandler(this.props.page - 1)}>\r\n                </Pagination.Prev>,\r\n\r\n                <Pagination.Ellipsis key=\"first\" onClick={() =>\r\n                    this.props.onPageChangeHandler(1)}>\r\n                </Pagination.Ellipsis>]);\r\n        }\r\n\r\n        //adds all visible page controls\r\n        for (let page = startPage; page <= endPage; page++) {\r\n            pagingItems.push(\r\n                <Pagination.Item key={page} active={page === this.props.page} disabled={page === this.props.page} onClick={() =>\r\n                    this.props.onPageChangeHandler(page)}>\r\n                    {page}\r\n                </Pagination.Item>\r\n            )\r\n        }\r\n\r\n        //if the las pages do not show an elipisis and control to go forwar a page are shown\r\n        if (endPage !== this.props.totalPages) {\r\n            pagingItems.push(...[\r\n                <Pagination.Ellipsis key=\"last\" onClick={() =>\r\n                    this.props.onPageChangeHandler(this.props.totalPages)}>\r\n                </Pagination.Ellipsis>,\r\n                <Pagination.Next key=\"next\" onClick={() =>\r\n                    this.props.onPageChangeHandler(this.props.page + 1)}>\r\n                </Pagination.Next>]);\r\n        }\r\n\r\n        return pagingItems;\r\n    }\r\n\r\n    render() {\r\n\r\n        const { startPage, endPage } = calculateStartAndEndPage(this.props.page, this.props.totalPages);\r\n        const childrenItems = this.getPaginationItems(startPage, endPage);\r\n        return (\r\n            <Pagination>\r\n                {childrenItems}\r\n            </Pagination>);\r\n    };\r\n}\r\n\r\nexport default Pager;","\r\nimport { maxPages } from '../../constants';\r\n\r\n/**@description Method that\r\n *  Calculates which page controls can be shown into the view at a time\r\n * @returns {Object} this object has the startPage and endPage as properties\r\n */\r\nconst calculateStartAndEndPage = (page, totalPages) => {\r\n        //page controls to be displayed before the selected one\r\n        const pagesBefore = page > Math.round(maxPages / 2) ? Math.round(maxPages / 2) : Math.max(page - 1, 0);\r\n        let extraPages = maxPages - pagesBefore;\r\n        //page controls to be displayed after the selected one\r\n        const pagesAfter = (totalPages - page) >= extraPages ? extraPages : totalPages - page;\r\n\r\n        const startPage = page - pagesBefore;\r\n        const endPage = page + pagesAfter;\r\n        return { startPage, endPage };\r\n}\r\n\r\nexport {calculateStartAndEndPage};\r\n\r\n","const apiBaseUrl = 'http://localhost:5050';\r\nconst defaultPageSize = 5;\r\nconst maxPages = 5;\r\nconst enviroments = { \r\n        development: 'development'\r\n    };\r\nconst listTitle = \"Your transactions\";\r\n\r\nexport {\r\n    apiBaseUrl,\r\n    defaultPageSize,\r\n    maxPages,\r\n    enviroments,\r\n    listTitle\r\n};\r\n","import React from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport List from '../../components/list'\r\nimport { defaultPageSize, listTitle } from '../../../constants';\r\nimport Pager from  '../../components/pager'\r\nimport {getData} from '../../utils/transactions-client';\r\n\r\n\r\nclass Balance extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            transactions: [],\r\n            page: 1,\r\n            totalPages: 0,\r\n            pagedTransactions: []\r\n        };\r\n        this.onRefresh = this.onRefresh.bind(this);\r\n        this.onPageChangeHandler = this.onPageChangeHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setData();\r\n    }\r\n\r\n    /**@description Retrieves data and updates pagedData\r\n     */\r\n    setData() {\r\n        getData().then(data =>\r\n            this.setState(state => {\r\n                return { ...state, ...data, pagedTransactions: this.getPagedData(state.page, data.transactions) };\r\n            }));\r\n    }\r\n\r\n    /**@description Updates state when\r\n     * transactions data gets a refresh request\r\n     */\r\n    onRefresh() {\r\n        this.setData();\r\n    }\r\n\r\n    /**@description calculates the new page of data\r\n     */\r\n    getPagedData(page, transactions) {\r\n        return transactions.slice((page - 1) * defaultPageSize, (page * defaultPageSize));\r\n    }\r\n\r\n    onPageChangeHandler(page) {\r\n        this.setState(state => {\r\n            return { ...state, page, pagedTransactions: this.getPagedData(page, state.transactions) };\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Header className=\"shadow font-italic sticky-top badge-dark py-0\" >\r\n                    <label>Your account's Balance:</label><br />\r\n                    ${this.state.balance}\r\n                    <Button className=\"float-right\" onClick={() => this.onRefresh()}>\r\n                    Refresh!\r\n                    </Button>\r\n                </Card.Header>\r\n                <Card.Body className=\"back-balance\">\r\n                    <List title={listTitle} transactions={this.state.pagedTransactions}>\r\n                    </List>\r\n                </Card.Body>\r\n                <Card.Footer className=\"bg-secondary fixed-bottom py-0\">\r\n                    <Pager totalPages={this.state.totalPages}\r\n                        page={this.state.page}\r\n                        onPageChangeHandler={this.onPageChangeHandler}\r\n                    ></Pager>\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Balance;","\r\nimport { defaultPageSize, apiBaseUrl, enviroments } from '../../constants';\r\nconst baseUrl = process.env.NODE_ENV === enviroments.development ? apiBaseUrl : \"\";\r\n\r\n\r\n/**@description Retrieves transactions from\r\n *     the serverside API\r\n * @returns {Promise} a promise that resolves to an object containing\r\n *  a collection named transactions and a number numbed balance and the number total pages \r\n */\r\nconst getData = () => {\r\n    return new Promise((resolve) => {\r\n    fetch(`${process.env.BASE_URL || baseUrl}/api/transaction`)\r\n        .then(transactionsData => transactionsData.json())\r\n        .then(transactionsData => {        \r\n\r\n            fetch(`${process.env.BASE_URL || baseUrl}/api/`)\r\n            .then(balanceData => balanceData.json())\r\n            .then(balanceData => {\r\n                const totalPages =  Math.ceil(transactionsData.transactions.length / defaultPageSize);\r\n                resolve({ ...transactionsData, balance: balanceData.balance.toFixed(2) , ...{ totalPages } });\r\n            }\r\n\r\n            );\r\n        }\r\n        );\r\n    });\r\n}\r\n\r\n\r\nexport {getData};\r\n","import React from 'react';\r\nimport './app.css';\r\nimport Balance from './pages/balance';\r\n\r\nconst App = () => {\r\n  document.title = 'Accounting Notebook';\r\n  return (\r\n    <div>\r\n      <Balance />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './app/app';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}